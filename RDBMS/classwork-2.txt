--Product (product_id, name, description, unit_price, units_in_stock,
--quantity_per_unit, category_id)

CREATE TABLE PRODUCTS(
    PRODUCT_ID NUMBER,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(255),
    UNIT_PRICE NUMBER(10,2),
    UNITS_IN_STOCK NUMBER(4),
    QUANTITY_PER_UNIT VARCHAR(255),
    CATEGORY_ID NUMBER
);

ALTER TABLE PRODUCTS ADD CONSTRAINT PK_PRODUCTS PRIMARY KEY (PRODUCT_ID);
ALTER TABLE PRODUCTS ADD CONSTRAINT CHK_PRODUCTS_UNIT_PRICE CHECK (UNIT_PRICE >= 0);
ALTER TABLE PRODUCTS ADD CONSTRAINT CHK_PRODUCTS_UNITS_IN_STOCK CHECK (UNITS_IN_STOCK >= 0);

--Category (category_id, name, description)
CREATE TABLE CATEGORIES(
    CATEGORY_ID NUMBER,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(255),
    CONSTRAINT PK_CATEGORIES PRIMARY KEY (CATEGORY_ID)
);

ALTER TABLE PRODUCTS ADD CONSTRAINT FK_PRODUCTS_CATEGORIES 
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES;
    
ALTER TABLE PRODUCTS DROP CONSTRAINT FK_PRODUCTS_CATEGORIES;

ALTER TABLE PRODUCTS ADD CONSTRAINT FK_PRODUCTS_CATEGORIES 
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES ON DELETE CASCADE;

--Customer (customer_id, name, street, area, city, state, country, pincode,
--email, phone)
CREATE TABLE CUSTOEMERS (
    CUSTOMER_ID NUMBER,
    NAME VARCHAR(50) NOT NULL,
    STREET VARCHAR(50),
    AREA VARCHAR(50),
    CITY VARCHAR(50) DEFAULT 'BANGALORE',
    STATE VARCHAR(50) DEFAULT 'KARNATAKA',
    COUNTRY VARCHAR(50) DEFAULT 'INDIA',
    PINCODE VARCHAR(10),
    CONSTRAINT PK_CUSTOMERS PRIMARY KEY (CUSTOMER_ID)
);

--Coupon (coupon_code, description, discount_percent, expires_on)
CREATE TABLE COUPONS (
    COUPON_CODE VARCHAR(25),
    DESCRIPTION VARCHAR(255),
    DISCOUNT_PERCENT NUMBER(5,2),
    CONSTRAINT PK_COUPONS PRIMARY KEY (COUPON_CODE),
    CONSTRAINT CHK_COUPONS_DISCOUNT_PCT CHECK (DISCOUNT_PERCENT BETWEEN 0 AND 100)
);

--Product_Pictures (id, product_id, picture)
CREATE TABLE PRODUCT_PICTURES (
    ID NUMBER,
    PRODUCT_ID NUMBER,
    PICTURE BLOB,
    CONSTRAINT PK_PRODUCT_PICTURES PRIMARY KEY(ID),
    CONSTRAINT FK_PRODUCT_PICTURES_PRODUCTS FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS
);

--Order (order_id, customer_id, coupon_code, order_date, status,
--shipped_date, freight, order_total, pmt_mode)
CREATE TABLE ORDERS(
    ORDER_ID NUMBER,
    CUSTOMER_ID NUMBER NOT NULL,
    COUPON_CODE VARCHAR(25),
    ORDER_DATE DATE DEFAULT SYSDATE, -- MUST BE LESS THAN OR EQUALS TO SYSDATE
    STATUS VARCHAR(10), -- PENDING, PROCESSING, SHIPPED, DELIVERED
    SHIPPED_DATE DATE, -- MUST BE GREATER THAN OR EQUALS TO THE ORDER_DATE
    FRIEGHT NUMBER(10, 2), -- MUST BE >= 0 (ACCIDENTALLY, ITS BEEN MISSPELLED)
    ORDER_TOTAL NUMBER(10, 2), -- MUST BE >=0
    PMT_MODE VARCHAR(15) -- CASH, CHQ_DD, ONLINE
);
ALTER TABLE ORDERS ADD PRIMARY KEY (ORDER_ID);
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS_CUSTOMERS FOREIGN KEY (CUSTOMER_ID)
    REFERENCES CUSTOMERS;
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS_COUPONS FOREIGN KEY (COUPON_CODE)
    REFERENCES COUPONS;
-- ALTER TABLE ORDERS ADD CONSTRAINT CHK_ORDERS_ORDER_DATE CHECK (ORDER_DATE <= SYSDATE);
-- THE ABOVE COMMAND FAILS; SOLUTION IS TO CREATE A TRIGGER THAT ENSURES THIS CONDITION
ALTER TABLE ORDERS ADD CONSTRAINT CHK_ORDERS_STATUS 
    CHECK (STATUS IN ('PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED'));
ALTER TABLE ORDERS ADD CONSTRAINT CHK_ORDERS_SHIPPED_DATE
    CHECK (SHIPPED_DATE>=ORDER_DATE);

ALTER TABLE ORDERS ADD CONSTRAINT CHK_ORDERS_ORDER_TOTAL
    CHECK (ORDER_TOTAL >= 0);
ALTER TABLE ORDERS ADD CONSTRAINT CHK_ORDERS_PMT_MODE
    CHECK (PMT_MODE IN ('CASH', 'CHQ_DD', 'ONLINE'));
    
ALTER TABLE ORDERS RENAME COLUMN FRIEGHT TO FREIGHT;
    
ALTER TABLE ORDERS ADD CONSTRAINT CHK_ORDERS_FREIGHT CHECK (FREIGHT>=0);


--Order_products (order_id, product_id, quantity)
CREATE TABLE ORDER_PRODUCTS (
    ORDER_ID NUMBER, 
    PRODUCT_ID NUMBER,
    QUANTITY NUMBER,
    CONSTRAINT PK_ORDER_PRODUCTS PRIMARY KEY (ORDER_ID, PRODUCT_ID),
    CONSTRAINT FK_ORDER_PRODUCTS_ORDERS FOREIGN KEY (ORDER_ID) REFERENCES ORDERS,
    CONSTRAINT FK_ORDER_PRODUCTS_PRODUCTS FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS,
    CONSTRAINT CHK_ORDER_PRODUCTS_QUANTITY CHECK (QUANTITY>=0)
);

-- OR
CREATE TABLE ORDER_PRODUCTS (
    ORDER_ID NUMBER CONSTRAINT FK_ORDER_PRODUCTS_ORDERS REFERENCES ORDERS, 
    PRODUCT_ID NUMBER CONSTRAINT FK_ORDER_PRODUCTS_PRODUCTS REFERENCES PRODUCTS,
    QUANTITY NUMBER CONSTRAINT CHK_ORDER_PRODUCTS_QUANTITY CHECK (QUANTITY>=0),
    CONSTRAINT PK_ORDER_PRODUCTS PRIMARY KEY (ORDER_ID, PRODUCT_ID)
);

--Revew (customer_id, product_id, review_date, rating, feedback)
CREATE TABLE REVIEWS(
    CUSTOMER_ID NUMBER NOT NULL CONSTRAINT FK_REVIEWS_CUSTOMERS REFERENCES CUSTOMERS,
    PRODUCT_ID NUMBER NOT NULL CONSTRAINT FK_REVIEWS_PRODUCTS REFERENCES PRODUCTS,
    REVIEW_DATE DATE DEFAULT SYSDATE,
    RATING NUMBER NOT NULL CONSTRAINT CHK_REVIEWS_RATING CHECK (RATING BETWEEN 1 AND 5),
    FEEDBACK VARCHAR(255) ,
    CONSTRAINT PK_REVIEWS PRIMARY KEY (CUSTOMER_ID, PRODUCT_ID)
);

--ratings_grades (id, rating_min, rating_max, rating_category)
CREATE TABLE RATING_GRADES(
    ID NUMBER CONSTRAINT PK_RATING_GRADES PRIMARY KEY,
    RATING_MIN NUMBER(1),
    RATING_MAX NUMBER(1),
    RATING_CATEGORY VARCHAR(15),
    CONSTRAINT CHK_RATING_MIN_MAX CHECK (RATING_MIN < RATING_MAX),
    CONSTRAINT CHK_RATING_CATEGORY CHECK (RATING_CATEGORY IN ('POOR', 'AVERAGE', 'GOOD'))
);

INSERT INTO CATEGORIES VALUES (1, 'Cellphones', 'Mobile phones etc');
INSERT INTO CATEGORIES VALUES (2, 'Accessories', 'Charging cables, adaptors etc.');

INSERT INTO PRODUCTS VALUES (1, 'Blue Yu Smartphone XL12', NULL, 17500, 29, '1 phone in 1 box', 1);
INSERT INTO PRODUCTS VALUES (2, 'USB Type-C 65 watts charging cable', NULL, 850, 12, '1mt long cable', 2);

SELECT * FROM PRODUCTS;
SELECT * FROM CATEGORIES;

DELETE FROM CATEGORIES WHERE CATEGORY_ID=2; -- DELETES ALL PRODUCTS HAVING THIS ID AS THEIR CATEGORY ID

CREATE SEQUENCE SEQ_CUSTOMERS
    START WITH 1
    INCREMENT BY 1
    NOMAXVALUE
    NOCYCLE;

ALTER TABLE REVIEWS DROP CONSTRAINT FK_REVIEWS_CUSTOMERS;
ALTER TABLE ORDERS DROP CONSTRAINT FK_ORDERS_CUSTOMERS;
DROP TABLE CUSTOMERS;
ALTER TABLE CUSTOEMERS RENAME TO CUSTOMERS;
ALTER TABLE REVIEWS ADD CONSTRAINT FK_REVIEWS_CUSTOMERS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS;
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS_CUSTOMERS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS;


INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME) VALUES (SEQ_CUSTOMERS.NEXTVAL, 'Anand');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME) VALUES (SEQ_CUSTOMERS.NEXTVAL, 'VINOD KUAMR');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME) VALUES (SEQ_CUSTOMERS.NEXTVAL, 'RAMESH KAMATH');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME) VALUES (SEQ_CUSTOMERS.NEXTVAL, 'SUJAY ANAND');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME) VALUES (SEQ_CUSTOMERS.NEXTVAL, 'SATISH RAO');


SELECT * FROM CUSTOMERS;

SELECT SEQ_CUSTOMERS.CURRVAL FROM DUAL;

UPDATE CUSTOMERS
    SET STREET='1ST CROSS, 1ST MAIN',
        AREA='ISRO LAYOUT',
        PINCODE='560078'
    WHERE CUSTOMER_ID=12;

UPDATE CUSTOMERS SET CITY='BENGALURU';

UPDATE CUSTOMERS SET AREA='JAYANAGAR'
    WHERE CUSTOMER_ID IN (11, 13, 14, 25);


UPDATE CUSTOMERS SET 
        AREA='BASAVANAGUDI', 
        PINCODE='560019' 
    WHERE NAME LIKE 'SATISH%';


DELETE FROM CUSTOMERS; --DELETES ALL CUSTOMERS (MAY FAIL IF THERE ARE REFERENCED ROWS IN OTHER TABLES)

DELETE FROM CUSTOMERS WHERE CUSTOMER_ID=8; -- ALWAYS BETTER TO USE PRIMARY KEY FOR FILTERING
DELETE FROM CUSTOMERS WHERE PINCODE IS NULL;
DELETE FROM CUSTOMERS WHERE lower(CITY)='bengaluru';

SHOW AUTOCOMMIT;

COMMIT;

SELECT * FROM CUSTOMERS;
DELETE FROM CUSTOMERS WHERE CUSTOMER_ID=15;

ROLLBACK; -- ALL CHANGES TO THE DATA (NOT THE STRUCTURE) SINCE THE LAST COMMIT ARE GOING TO CANCELLED.
-- ONCE A CLIENT CONNECTS THE SERVER, A TRANSACTION BEGINS
-- A TRANSACTION INVOLVES INSERT/UPDATE/DELETE OPERATIONS
-- A TRANSACTION'S STATE CAN BE SAVED TO THE UNDERLYING DB FILES, BY ISSUING A COMMIT COMMAND
-- WHENEVER WE EXECUTE A DDL (CREATE/ALTER/DROP), A COMMIT IS DONE IMPLICITLY


-- explore more about savepoints
