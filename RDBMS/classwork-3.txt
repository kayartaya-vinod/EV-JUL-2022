set serveroutput on 

-- ANONYMOUS PL/SQL BLOCK
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hello, this is from PL/SQL');
    INSERT INTO CATEGORIES VALUES (3, 'LAPTOPS', 'LAPTOP COMPUTERS OF VARIOUS VENDORS');
END;
/


-- PRINT THE RESULT OF DIVISION OF TWO NUMBERS
DECLARE
    V_NUM1 NUMBER;
    V_NUM2 NUMBER;
    V_RESULT  NUMBER;
BEGIN
    V_NUM1 := &num1;
    V_NUM2 := &num2;
    V_RESULT := V_NUM1 / V_NUM2;
    DBMS_OUTPUT.PUT_LINE('THE RESULT OF DIVISION OF ' || 
        V_NUM1 || ' BY ' || V_NUM2 ||
        ' IS ' || V_RESULT);
EXCEPTION
    WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.PUT_LINE('CANNOT DIVIDE ' || V_NUM1 || ' BY ZERO');
END;
/

-- DISPLAY THE DETAILS OF AN EMPLOYEE WHOSE ID IS INPUT BY THE USER
DECLARE
    V_EMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    V_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
    V_LAST_NAME EMPLOYEES.LAST_NAME%TYPE;
    V_SALARY EMPLOYEES.SALARY%TYPE;
BEGIN
    V_EMPLOYEE_ID := &EMPLOYEE_ID;
    
    SELECT FIRST_NAME, LAST_NAME, SALARY
        INTO V_FIRST_NAME, V_LAST_NAME, V_SALARY
        FROM EMPLOYEES 
        WHERE EMPLOYEE_ID=V_EMPLOYEE_ID;
        
    DBMS_OUTPUT.PUT_LINE('First name: ' || V_FIRST_NAME);
    DBMS_OUTPUT.PUT_LINE('Lsat name : ' || V_LAST_NAME);
    DBMS_OUTPUT.PUT_LINE('Salary    : ' || V_SALARY);
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No matching employee record found for id: ' || V_EMPLOYEE_ID);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Something went wrong!!');
END;
/


-- DISPLAY THE DETAILS OF AN EMPLOYEE WHOSE ID IS INPUT BY THE USER
DECLARE
    V_EMP EMPLOYEES%ROWTYPE;
    V_EMP_CATEGORY VARCHAR(15);
BEGIN
    V_EMP.EMPLOYEE_ID := &EMPLOYEE_ID;
    
    SELECT *
        INTO V_EMP
        FROM EMPLOYEES 
        WHERE EMPLOYEE_ID=V_EMP.EMPLOYEE_ID;
        
    IF V_EMP.SALARY >= 10000 THEN
        V_EMP_CATEGORY := 'CATEGORY-A';
    ELSE
        V_EMP_CATEGORY := 'CATEGORY-B';
    END IF;
        
    DBMS_OUTPUT.PUT_LINE('First name: ' || V_EMP.FIRST_NAME);
    DBMS_OUTPUT.PUT_LINE('Lsat name : ' || V_EMP.LAST_NAME);
    DBMS_OUTPUT.PUT_LINE('Salary    : ' || V_EMP.SALARY);
    DBMS_OUTPUT.PUT_LINE('Category  : ' || V_EMP_CATEGORY);
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No matching employee record found for id: ' || V_EMP.EMPLOYEE_ID);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Something went wrong!!');
END;
/


-- LOOP, WHILE, FOR
DECLARE
    NUM NUMBER:=1;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE(NUM);
        NUM := NUM + 1;
        
        EXIT WHEN NUM > 10;
    END LOOP;
END;
/

DECLARE
    NUM NUMBER:=1;
BEGIN
    WHILE NUM <= 10
    LOOP
        DBMS_OUTPUT.PUT_LINE(NUM);
        NUM := NUM + 1;
    END LOOP;
END;
/

BEGIN
    FOR NUM IN 1..10
    LOOP
        DBMS_OUTPUT.PUT_LINE(NUM);
    END LOOP;
END;
/

BEGIN
    FOR NUM IN REVERSE 1..10
    LOOP
        DBMS_OUTPUT.PUT_LINE(NUM);
    END LOOP;
END;
/


DECLARE
    CURSOR CUR_EMP IS 
        SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;
    V_EMP EMPLOYEES%ROWTYPE;
BEGIN
    OPEN CUR_EMP; -- ACTUAL SQL SELECT STATEMENT IS EXECUTED NOW
    
    LOOP
        FETCH CUR_EMP INTO V_EMP; -- FETCH THE CURRENT RECORD INTO THE VARIABLE, AND MOVE THE CURSOR TO THE NEXT ONE
        EXIT WHEN CUR_EMP%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE(V_EMP.FIRST_NAME || ' earns $' || V_EMP.SALARY || ' salary per month');
    END LOOP;
    
    CLOSE CUR_EMP;
END;
/

DECLARE
    CURSOR CUR_EMP(V_DEPT_ID NUMBER) IS 
        SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = V_DEPT_ID;
    V_EMP EMPLOYEES%ROWTYPE;
BEGIN
    OPEN CUR_EMP(30); -- ACTUAL SQL SELECT STATEMENT IS EXECUTED NOW
    
    LOOP
        FETCH CUR_EMP INTO V_EMP; -- FETCH THE CURRENT RECORD INTO THE VARIABLE, AND MOVE THE CURSOR TO THE NEXT ONE
        EXIT WHEN CUR_EMP%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE(V_EMP.FIRST_NAME || ' earns $' || V_EMP.SALARY || ' salary per month');
    END LOOP;
    
    CLOSE CUR_EMP;
END;
/


DECLARE
    CURSOR CUR_EMP(V_DEPT_ID NUMBER) IS 
        SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = V_DEPT_ID;
BEGIN
    
    FOR V_EMP IN CUR_EMP(30)
    LOOP        
        DBMS_OUTPUT.PUT_LINE(V_EMP.FIRST_NAME || ' earns $' || V_EMP.SALARY || ' salary per month');
    END LOOP;
    
END;
/

-- WE USE THE DDL TO CREATE A STORED PROCEDURE/FUNCTION/TRIGGER
-- THESE OBJECTS BECOME PART OF THE RDBMS SERVER
CREATE OR REPLACE PROCEDURE ADD_CATEGORY(P_NAME VARCHAR, P_DESCRIPTION VARCHAR)
IS
    V_NEW_ID CATEGORIES.CATEGORY_ID%TYPE;
BEGIN
    SELECT MAX(CATEGORY_ID)+1
        INTO V_NEW_ID
        FROM CATEGORIES;
        
    INSERT INTO CATEGORIES
        VALUES (V_NEW_ID, P_NAME, P_DESCRIPTION);
END;
/

SHOW ERRORS;

EXEC ADD_CATEGORY('AUDIO DEVICES', 'SPEAKERS, HEADPHONES, EARPLUGS, SOUND BARS ETC');

EXEC C##U1.ADD_CATEGORY('CLEANING DEVICES', 'AIR PURIFIER, FLOOR CLEANING ROBOT ETC');

SELECT * FROM CATEGORIES;


CREATE OR REPLACE PROCEDURE ADD_CATEGORY(P_NAME VARCHAR, P_DESCRIPTION VARCHAR, P_ID OUT NUMBER)
IS
BEGIN
    SELECT MAX(CATEGORY_ID)+1
        INTO P_ID
        FROM CATEGORIES;
        
    INSERT INTO CATEGORIES
        VALUES (P_ID, P_NAME, P_DESCRIPTION);
END;
/

VAR NEW_CATEGORY_ID NUMBER;
PRINT NEW_CATEGORY_ID;
EXEC ADD_CATEGORY('TEST CAT', 'TEST CATEGORY DESC', :NEW_CATEGORY_ID);


-- THIS PROCEDURE RETRIEVES NAME, LOCATION, MANAGER NAME FOR A GIVEN DEPARMENT ID
CREATE OR REPLACE PROCEDURE GET_DEPT_INFO(
    P_DEPARTMENT_ID IN NUMBER,
    P_DEPARTMENT_NAME OUT VARCHAR,
    P_LOCATION_NAME OUT VARCHAR,
    P_MANAGER_NAME OUT VARCHAR
) IS
    V_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
    V_LAST_NAME EMPLOYEES.LAST_NAME%TYPE;
    V_STREET_ADDRESS LOCATIONS.STREET_ADDRESS%TYPE;
    V_CITY LOCATIONS.CITY%TYPE;
    V_COUNTRY_NAME COUNTRIES.COUNTRY_NAME%TYPE;
BEGIN
    SELECT 
            D.DEPARTMENT_NAME,
            E.FIRST_NAME, E.LAST_NAME,
            L.STREET_ADDRESS, L.CITY,
            C.COUNTRY_NAME
        INTO
            P_DEPARTMENT_NAME,
            V_FIRST_NAME, V_LAST_NAME,
            V_STREET_ADDRESS, V_CITY,
            V_COUNTRY_NAME
        FROM DEPARTMENTS D 
        JOIN EMPLOYEES E ON D.MANAGER_ID=E.EMPLOYEE_ID
        JOIN LOCATIONS L ON D.LOCATION_ID=L.LOCATION_ID
        JOIN COUNTRIES C ON L.COUNTRY_ID=C.COUNTRY_ID
        WHERE D.DEPARTMENT_ID = P_DEPARTMENT_ID;
        
        P_LOCATION_NAME := V_STREET_ADDRESS || ', ' || V_CITY || ', ' || V_CITY;
        P_MANAGER_NAME := V_FIRST_NAME || ' ' || V_LAST_NAME;
END;
/

-- CREATE VARIABLES IN THE SQL DEVELOPER TO BE SENT TO THE SERVER AS OUT PARAMETERS
VAR DNAME VARCHAR2(50);
VAR LOCATION VARCHAR2(255);
VAR MGR_NAME VARCHAR2(50);

PRINT DNAME;
PRINT LOCATION;
PRINT MGR_NAME;

EXEC GET_DEPT_INFO(50, :DNAME, :LOCATION, :MGR_NAME);











